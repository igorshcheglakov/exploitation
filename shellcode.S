BITS 32

jmp short one ; Jump down to a call at the end

two:
; ssize_t write(int fd, const void *buf, size_t count)
pop ecx       ; Pop the return address (string ptr) into ecx
xor eax, eax  ; Zero out eax
mov al, 4     ; Write syscall #4 to the low byte of eax
xor ebx, ebx  ; Zero out ebx
mov bl, 1     ; Put 1 into ebx, since stdout is 1.
xor edx, edx  ; Zero out edx
mov dl, 14    ; Put 14 into edx, since our string is 14 bytes.
int 0x80      ; Call the kernel to make the system call happen.

; void _exit(int status)
mov al, 1    ; Put 1 into eax, since exit is syscall #1.
dec ebx      ; Decrement ebx back down to 0
int 0x80     ; Do the syscall.

one:
call two      ; Call back upwords to avoid null bytes
db "Hello, world!", 0x0a
